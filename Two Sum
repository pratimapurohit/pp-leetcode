Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
You can return the answer in any order.

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Output: Because nums[0] + nums[1] == 9, we return [0, 1].

Solution 1: Brute force

class Solution {
    public int[] twoSum(int[] nums, int target) {
        int[] result = new int[2]; //result set
        for(int i=0; i<nums.length; i++) {  //0   //1
            for(int j=i+1; j<nums.length; j++) {  //1,2,3...n-1  //2,3,4...n-1
                if(nums[i] + nums[j] == target) {
                    result[0] = i;
                    result[1] = j;
                }
            }
        }
        return result;
    }
}

Time: O(n^2)
Space: Constant

Solution 2: Two pass hash table

class Solution {
    public int[] twoSum(int[] nums, int target) {
      Map<Integer, Integer> map = new HashMap<>();
      int[] result = new int[2];
      for(int i=0;i<nums.length;i++) {
          map.put(nums[i], i);   //Put the values in a map like a lookup dict
      }
        
      for(int i=0;i<nums.length;i++) {
          int complement = target - nums[i];
          if(map.containsKey(complement) && map.get(complement) != i) { //check if the complement is present and that the complement is not the number itself
             result[0] = i;
             result[1] = map.get(complement); 
             return result;
          }
      }
      return result;
    }
}

Time: O(n)
Space: O(n)

Solution 2: One pass hash table

class Solution {
    public int[] twoSum(int[] nums, int target) {
      Map<Integer, Integer> map = new HashMap<>();
      int[] result = new int[2];
      for(int i=0;i<nums.length;i++) {
          int complement = target - nums[i];
          if(map.containsKey(complement) && map.get(complement) != i) {
             result[0] = i;
             result[1] = map.get(complement); 
             return result;
          }
          map.put(nums[i], i); //put the values in the map only if the complement is still not found
      }
      return result;
    }
}

Time: O(n)
Space: O(n) at max

